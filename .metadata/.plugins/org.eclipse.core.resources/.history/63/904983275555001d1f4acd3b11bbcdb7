package br.com.listando.listando.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import br.com.listando.listando.model.entities.Marca;
import br.com.listando.listando.model.entities.Produto;

@SpringBootTest
@ActiveProfiles("test")
public class ProdutoTests {
	
	@Autowired
	private IServiceProduto service;
	@Autowired
	private IServiceMarca serviceM;
	//private static ProdutoServiceImpl service;
	private static Integer idFound = 1;
	private static Integer IdNotFound = 100;
	private static Produto produto;
	private static Produto produto2;
	private static Marca marca;
	private static Marca marca2;
	private static Produto produtoCriado;
	private static List<Produto> lista2;
	
	@BeforeAll
	public static void setup() {
		
		marca = new Marca();
		marca.setNome("Garoto");
		
		marca2 = new Marca();
		marca2.setNome("Nestle");
		
		produto = new Produto();
		produto.setNome("Bolacha");
		produto.setMarca(marca);
		
		produtoCriado = new Produto();
		produtoCriado.setNome("Bolacha");
		produtoCriado.setId(1);
		
		
		produto2 = new Produto();
		produto2.setNome("Leite em PÃ³");
		produto2.setMarca(marca2);
		
		lista2 = new ArrayList<>();
		
		lista2.add(produto);
		lista2.add(produto2);
		
//		service = Mockito.mock(ProdutoServiceImpl.class);
//		Mockito.when(service.criarNovoProduto(newProduct)).thenReturn(createdProduct);
//		Mockito.when(service.buscarPorId(idFound)).thenReturn(createdProduct);
//		Mockito.when(service.buscarPorId(IdNotFound)).thenReturn(null);
//		Mockito.when(service.buscarPorPalavraChave("b")).thenReturn(new ArrayList<Produto>());
//		Mockito.when(service.listarTodos()).thenReturn(new ArrayList<Produto>());
//		Mockito.when(service.alterarProduto(createdProduct)).thenReturn(createdProduct);
	}
	
	@Test
	public void shouldRecordProduct() {
		serviceM.CriarNovaMarca(marca2);
		assertNotNull(service.criarNovoProduto(produto2));
	}
	
	
	@Test
	public void shouldFindById() {
		serviceM.CriarNovaMarca(marca);
		service.criarNovoProduto(produto);
		assertNotNull(service.buscarPorId(idFound));
	}
	
	@Test
	public void shuoldNotFindById() {
		serviceM.CriarNovaMarca(marca);
		service.criarNovoProduto(produto);
		assertNull(service.buscarPorId(IdNotFound));
	}
	
	@Test
	public void shouldRemove() {
		serviceM.CriarNovaMarca(marca);
		service.criarNovoProduto(produto);
		service.removerProduto(produto);
		assertNull(service.buscarPorId(idFound));
	}
	
	@Test
	public void shouldFindByKeyword() {
		serviceM.CriarNovaMarca(marca2);
		service.criarNovoProduto(produto2);
		List<Produto> lista = service.buscarPorPalavraChave("l");
		assertTrue(lista.contains(produto2));
	}
	
	@Test
	public void shouldListAll() {
		serviceM.CriarNovaMarca(marca);
		serviceM.CriarNovaMarca(marca2);
		service.criarNovoProduto(produto);
		service.criarNovoProduto(produto2);
		List<Produto> lista = service.listarTodos();
		assertTrue(lista.containsAll(lista2));
		
	}
	

}
